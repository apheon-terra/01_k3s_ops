---
# yaml-language-server: $schema=https://kubernetes-schemas.alpheon.uk/helmrelease_v2beta1.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: home-assistant
  namespace: default
spec:
  interval: 15m
  chart:
    spec:
      chart: app-template
      version: 1.5.1
      sourceRef:
        kind: HelmRepository
        name: bjw-s
        namespace: flux-system
  maxHistory: 3
  install:
    createNamespace: true
    remediation:
      retries: 3
  upgrade:
    cleanupOnFail: true
    remediation:
      retries: 3
  uninstall:
    keepHistory: false
  values:
    initContainers:
      01-init-db:
        image: ghcr.io/onedr0p/postgres-init:14.8
        imagePullPolicy: IfNotPresent
        envFrom:
          - secretRef:
              name: home-assistant-secret
    controller:
      type: statefulset
      annotations:
        reloader.stakater.com/auto: 'true'
    image:
      repository: ghcr.io/onedr0p/home-assistant
      tag: 2023.6.3@sha256:6cffdde73b7f9a6a4041d422a32a713d36d5dcceec2a5106b59f95007248893a
    env:
      TZ: Etc/UTC
      POSTGRES_HOST: postgres-rw.default.svc.cluster.local
      POSTGRES_DB: home_assistant
    envFrom:
      - secretRef:
          name: home-assistant-secret
    dnsPolicy: ClusterFirstWithHostNet
    dnsConfig:
      options:
        - name: ndots
          value: '1'
    service:
      main:
        ports:
          http:
            port: 8123
    ingress:
      main:
        enabled: true
        ingressClassName: nginx
        annotations:
          external-dns.alpha.kubernetes.io/target: ingress.${SECRET_PUBLIC_DOMAIN}
          hajimari.io/icon: mdi:home-assistant
        hosts:
          - host: &host hass.${SECRET_PUBLIC_DOMAIN}
            paths:
              - path: /
                pathType: Prefix
        tls:
          - hosts:
              - *host
    probes:
      liveness:
        enabled: false
      readiness:
        enabled: false
      startup:
        enabled: false
    podSecurityContext:
      runAsUser: 568
      runAsGroup: 568
      fsGroup: 568
      fsGroupChangePolicy: OnRootMismatch

#   In the case of fsGroupChangePolicy: OnRootMismatch, it means that if the existing files and
# directories have a root-owned group, Kubernetes will change the group ownership of the files to
#  the specified fsGroup. This policy ensures that all files in the volume have the same group
#  ownership, allowing proper access control within the Pod.

# Other possible values for fsGroupChangePolicy include:

# Always: Regardless of the existing file ownership, Kubernetes always changes the group
# ownership to the specified fsGroup.
# Never: Kubernetes does not attempt to change the group ownership, even if it mismatches
# the specified fsGroup.

      # supplementalGroups:
      # - 65539
    volumeClaimTemplates:
      - name: config
        mountPath: /config
        accessMode: ReadWriteOnce
        size: 5Gi
        storageClass: ceph-block
      #dragosh
    # persistence:
    #   config:
    #     enabled: true
    #     existingClaim: home-assistant-config-0
    #     volumeMounts:
    #       - name: config
    #         mountPath: /config
    #   backup:
    #     enabled: true
    #     type: custom
    #     volumeSpec:
    #       nfs:
    #         server: "${TRUENAS_VM_ADDRESS}"
    #         path: /mnt/tank/backups/softwarrself/home-assistant
    #     mountPath: /config/backups
    #     readOnly: false
    #   attachments:
    #     enabled: true
    #     type: custom
    #     volumeSpec:
    #       nfs:
    #         server: "${TRUENAS_VM_ADDRESS}"
    #         path: /mnt/tank/cameras-attachments
    #     mountPath: /camera-detection-attachments
    #   restore:
    #     enabled: false
    #     type: custom
    #     volumeSpec:
    #       nfs:
    #         server: "${TRUENAS_VM_ADDRESS}"
    #         path: /mnt/tank/backups/softwarrself/hass
    #     mountPath: /backup
    #     readOnly: false

    podAnnotations:
      k8s.v1.cni.cncf.io/networks: hass-wifi-static
      # secret.reloader.stakater.com/reload: "home-assistant"

    resources:
      requests:
        cpu: 10m
        memory: 100Mi
      limits:
        memory: 750Mi


# dnsPolicy: ClusterFirstWithHostNet: This specifies the DNS resolution policy for the Pod associated
# with the HelmRelease. In this case, ClusterFirstWithHostNet is set, which means that DNS resolution
#  will first be attempted using cluster DNS (based on the cluster's DNS service), and if it fails,
#  it will fall back to using the host's DNS resolver.

# dnsConfig: This section allows you to specify additional DNS resolver options.

# options: This is an array where you can define multiple DNS resolver options.

# - name: ndots: This specifies the DNS resolver option to set. In this case, it's ndots.

# value: "1": This specifies the value for the ndots option. As explained in the previous response,
#  ndots determines the number of dots required in a domain name to consider it a fully qualified
#  domain name (FQDN). Setting it to "1" means that a domain name with a single dot will be considered an FQDN.
