---
data_dir: /vector-data-dir
api:
  enabled: true
  address: 0.0.0.0:8686

enrichment_tables:
  geoip_table:
    type: geoip
    path: /usr/share/GeoIP/GeoLite2-City.mmdb

#
# Sources
#
#what you see is vrl  syntax vector remap language , will be compiled in rust
sources:
  journald_source:
    type: vector
    version: '2'
    address: 0.0.0.0:6000

  kubernetes_source:
    type: vector
    version: '2'
    address: 0.0.0.0:6010

  openwrt_source:
    type: syslog
    address: 0.0.0.0:6020
    mode: tcp

#
# Transforms
#

transforms:
  kubernetes_remap:
    type: remap
    inputs: [kubernetes_source]
    source: |
      # Standardize 'app' index
      .custom_app_name = .pod_labels."app.kubernetes.io/name" || .pod_labels.app || .pod_labels."k8s-app" || "unknown"
      # Drop pod_labels
      del(.pod_labels)

    # [63950.153039] [wan-local-default-D]IN=eth4 OUT= MAC=xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx SRC=xxx.xxx.xxx.xxx DST=xxx.xxx.xxx.xxx LEN=40 TOS=0x00 PREC=0x00 TTL=240 ID=60610 PROTO=TCP SPT=53451 DPT=2002 WINDOW=1024 RES=0x00 SYN URGP=0
  openwrt_firewall_route:
    type: route
    inputs: [openwrt_source]
    route:
      firewall: |
        .facility == "kern" && match!(.message, r'^\[(.*?)\].(.*)')


      # The expression ^\[(.*?)\].(.*) can be broken down as follows:

      #     ^ matches the beginning of a line.
      #     \[ matches the opening square bracket [.
      #     (.*?) is a capturing group that matches zero or more occurrences of any character, but as few characters as possible (*? is a non-greedy quantifier).
      #     \] matches the closing square bracket ].
      #     . matches any single character.
      #     (.*) is another capturing group that matches zero or more occurrences of any character.

      # The match! macro is a special macro provided by the Rust standard library that searches for a regular expression pattern in a string slice and returns a Option containing any capture groups. The match! macro is used in this context to extract the timestamp and message components from a log line that follows a specific format. Specifically, the regular expression is used to match log lines that begin with a timestamp in square brackets, followed by a period and a message.

      # The expression ^\[.*\].\[(?P<rule>.*?)\](?P<fields>.*) can be broken down as follows:

      #     ^ matches the beginning of a line.
      #     \[.*\] matches a pair of square brackets and any characters in between them.
      #     . matches any single character.
      #     \[(?P<rule>.*?)\] is a capturing group named rule that matches a pair of square brackets and any characters in between them, but as few characters as possible (*? is a non-greedy quantifier).
      #     (?P<fields>.*) is another capturing group named fields that matches zero or more occurrences of any character.

      # The parse_regex function is a function provided by the Vector log processing pipeline. It takes two arguments: a log message to parse and a regular expression to use for parsing. The regular expression must contain named capture groups, which are used to extract specific parts of the log message.

      # In this case, the regular expression is used to parse log messages that have a specific format, which includes a rule name enclosed in square brackets. The parse_regex function extracts this rule name into a field called rule, and any remaining fields are placed into a field called fields.

      # For example, if the log message is [2022-05-04 12:34:56.789] [my-rule] This is a log message, the parse_regex function would extract the rule name my-rule into a field called rule, and the remaining fields This is a log message would be placed into a field called fields.

  openwrt_firewall_remap:
    type: remap
    inputs: [openwrt_firewall_route.firewall]
    source: |
      # Parse firewall rule message
      split_message, split_err = parse_regex(.message, r'^\[.*\].\[(?P<rule>.*?)\](?P<fields>.*)')
      if split_err != null {
          abort
      }
      # Extract separate fields from message
      split_message.fields, split_err = strip_whitespace(split_message.fields)
      if split_err != null {
          abort
      }
      .message, parse_err = parse_key_value(split_message.fields, whitespace: "strict")
      if parse_err != null {
          abort
      }
      # Add more information about the triggered rule
      .message.RULE, parse_err = parse_regex(split_message.rule, r'^(?P<from_zone>\w+)-(?P<to_zone>\w+)-(?P<id>\w+)-(?P<action>\w+)$')
      if parse_err != null {
          abort
      }


    # This regular expression can be broken down as follows:

    #     ^ matches the beginning of a line.
    #     (?P<from_zone>\w+) is a capturing group named from_zone that matches one or more word characters (letters, digits, and underscores).
    #     - matches a hyphen character.
    #     (?P<to_zone>\w+) is a capturing group named to_zone that matches one or more word characters.
    #     - matches a hyphen character.
    #     (?P<id>\w+) is a capturing group named id that matches one or more word characters.
    #     - matches a hyphen character.
    #     (?P<action>\w+) is a capturing group named action that matches one or more word characters.
    #     $ matches the end of a line.

    #     For example, if the split_message.rule field contains the string "internal-external-1234-allow", the parse_regex function would extract the following fields:

    #     from_zone: "internal"
    #     to_zone: "external"
    #     id: "1234"
    #     action: "allow"

  openwrt_firewall_wan_route:
    type: route
    inputs: [openwrt_firewall_remap]
    route:
      from_wan: .message.RULE.from_zone == "wan"

  openwrt_firewall_geoip_remap:
    type: remap
    inputs: [openwrt_firewall_wan_route.from_wan]
    source: |
      .geoip = get_enrichment_table_record!(
          "geoip_table", {
              "ip": .message.SRC
          }
      )

#
# Sinks
#

sinks:
  journald:
    inputs: [journald_source]
    type: loki
    endpoint: http://loki-gateway.monitoring.svc.cluster.local
    encoding:
      codec: json
    out_of_order_action: accept
    remove_label_fields: true
    remove_timestamp: true
    labels:
      hostname: '{{ host }}'

  kubernetes:
    inputs: [kubernetes_remap]
    type: loki
    endpoint: http://loki-gateway.monitoring.svc.cluster.local
    encoding:
      codec: json
    out_of_order_action: accept
    remove_label_fields: true
    remove_timestamp: true
    labels:
      app: '{{ custom_app_name }}'
      namespace: '{{ kubernetes.pod_namespace }}'
      node: '{{ kubernetes.pod_node_name }}'

  openwrt:
    inputs: [openwrt_firewall_geoip_remap]
    type: loki
    endpoint: http://loki-gateway.monitoring.svc.cluster.local
    encoding:
      codec: json
    out_of_order_action: accept
    remove_label_fields: true
    remove_timestamp: true
    labels:
      hostname: '{{ host }}'
