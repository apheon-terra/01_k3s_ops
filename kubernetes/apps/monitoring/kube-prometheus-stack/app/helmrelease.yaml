---
# yaml-language-server: $schema=https://kubernetes-schemas.alpheon.uk/helmrelease_v2beta1.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: kube-prometheus-stack
  namespace: monitoring
spec:
  interval: 15m
  chart:
    spec:
      chart: kube-prometheus-stack
      version: 47.1.0
      sourceRef:
        kind: HelmRepository
        name: prometheus-community
        namespace: flux-system
  maxHistory: 3
  install:
    createNamespace: true
    crds: CreateReplace
    remediation:
      retries: 3
  upgrade:
    cleanupOnFail: true
    crds: CreateReplace
    remediation:
      retries: 3
      remediateLastFailure: true # remediate the last failure, when no retries remain
  uninstall:
    keepHistory: false
  values:
    cleanPrometheusOperatorObjectNames: true
    alertmanager:
      config:
        global:
          resolve_timeout: 5m
          # slack_api_url: "${SECRET_ALERT_MANAGER_DISCORD_WEBHOOK}"

        receivers:
        #paid plan , not needed
        # - name: heartbeat
        #   webhook_configs:
        #   - url: "https://heartbeat.uptimerobot.com/${SECRET_ALERTMANAGER_UPTIMEROBOT_HEARTBEAT_TOKEN}"
        #     send_resolved: true
          - name: 'null' # quote
          - name: pushover
            pushover_configs:
              - url_title: View in Alertmanager
                token: ${SECRET_ALERTMANAGER_PUSHOVER_TOKEN}
                user_key: ${SECRET_ALERTMANAGER_PUSHOVER_USER_KEY}
                send_resolved: true
                html: true
                sound: gamelan
                priority: |-
                  {{ if eq .Status "firing" }}1{{ else }}0{{ end }}
                title: |-
                  {{ .CommonLabels.alertname }} [{{ .Status | toUpper }}{{ if eq .Status "firing" }}:{{ .Alerts.Firing | len }}{{ end }}]
                message: |-
                  {{- range .Alerts }}
                    {{- if ne .Annotations.description "" }}
                      {{ .Annotations.description }}
                    {{- else if ne .Annotations.summary "" }}
                      {{ .Annotations.summary }}
                    {{- else if ne .Annotations.message "" }}
                      {{ .Annotations.message }}
                    {{- else }}
                      Alert description not available
                    {{- end }}
                    {{- if gt (len .Labels.SortedPairs) 0 }}
                      <small>
                      {{- range .Labels.SortedPairs }}
                        <b>{{ .Name }}:</b> {{ .Value }}
                      {{- end }}
                      </small>
                    {{- end }}
                  {{- end }}
        # - name: discord         #budimandojo
        #   discord_configs:
        #     - webhook_url: ${SECRET_DISCORD_PROMETHEUS_WH_URL}
        #       title: |-
        #         [{{ .Status | toUpper }}:{{ if eq .Status "firing" }}{{ .Alerts.Firing | len }}{{ else }}{{ .Alerts.Resolved | len }}{{ end }}]
        #       message: |-
        #         {{- range .Alerts }}
        #           **{{ .Labels.alertname }} {{ if ne .Labels.severity "" }}({{ .Labels.severity | title }}){{ end }} **
        #           {{- if ne .Annotations.description "" }}
        #             **Description:** {{ .Annotations.description }}
        #           {{- else if ne .Annotations.summary "" }}
        #             **Summary:** {{ .Annotations.summary }}
        #           {{- else if ne .Annotations.message "" }}
        #             **Message:** {{ .Annotations.message }}
        #           {{- else }}
        #             **Description:** N/A
        #           {{- end }}
        #         {{- end }}
        # - name: 'discord'   #dragosh
        #   slack_configs:
        #     - url: "${SECRET_ALERT_MANAGER_DISCORD_WEBHOOK}"
        #       icon_url: https://avatars3.githubusercontent.com/u/3380462
        #       username: "Prometheus"     #rust84
        #       send_resolved: true
        #       title: |-
        #         [{{ .Status | toUpper }}{{ if eq .Status "firing" }}:{{ .Alerts.Firing | len }}{{ end }}] {{ if ne .CommonAnnotations.summary ""}}{{ .CommonAnnotations.summary }} {{ else if ne .CommonAnnotations.message ""}}{{ .CommonAnnotations.message }} {{ else if ne .CommonAnnotations.description ""}}{{ .CommonAnnotations.description }} {{ else }}{{ .CommonLabels.alertname }}{{ end }}
        #       text: >-
        #         {{ range .Alerts -}}
        #           *Alert:* {{ .Annotations.title }}{{ if .Labels.severity }} - `{{ .Labels.severity }}`{{ end }}

        #         {{ if ne .Annotations.summary ""}}*Summary:* {{ .Annotations.summary }} {{ else if ne .Annotations.message ""}}*Message:* {{ .Annotations.message }} {{ else if ne .Annotations.description ""}}*Description:* {{ .Annotations.description }}{{ end }}

        #         *Details:*
        #           {{ range .Labels.SortedPairs }} • *{{ .Name }}:* `{{ .Value }}`
        #           {{ end }}
        #         {{ end }}
        # - name: 'discord-ceph'
        #   slack_configs:
        #     - url: "${SECRET_ALERT_MANAGER_DISCORD_CEPH_WEBHOOK}"
        #       send_resolved: true
        #       title: |-
        #         [{{ .Status | toUpper }}{{ if eq .Status "firing" }}:{{ .Alerts.Firing | len }}{{ end }}] {{ if ne .CommonAnnotations.summary ""}}{{ .CommonAnnotations.summary }} {{ else if ne .CommonAnnotations.message ""}}{{ .CommonAnnotations.message }} {{ else if ne .CommonAnnotations.description ""}}{{ .CommonAnnotations.description }} {{ else }}{{ .CommonLabels.alertname }}{{ end }}
        #       text: >-
        #         {{ range .Alerts -}}
        #           *Alert:* {{ .Annotations.title }}{{ if .Labels.severity }} - `{{ .Labels.severity }}`{{ end }}

        #         {{ if ne .Annotations.summary ""}}*Summary:* {{ .Annotations.summary }} {{ else if ne .Annotations.message ""}}*Message:* {{ .Annotations.message }} {{ else if ne .Annotations.description ""}}*Description:* {{ .Annotations.description }}{{ end }}

        #         *Details:*
        #           {{ range .Labels.SortedPairs }} • *{{ .Name }}:* `{{ .Value }}`
        #           {{ end }}
        #         {{ end }}
        route:
          group_by: [alertname, job]
          group_wait: 1m
          group_interval: 10m
          repeat_interval: 12h
          receiver: pushover
          routes:
            - receiver: heartbeat
              group_wait: 0s
              group_interval: 2m
              repeat_interval: 2m
              matchers:
                - alertname =~ "Watchdog"
            - receiver: 'null' # quote
              matchers:
                - alertname =~ "InfoInhibitor"
            - receiver: pushover
              matchers:
                - severity = "critical"
              continue: true
            # - receiver: "discord"
            #   match_re:
            #     severity: critical
            #   continue: true
            # - receiver: "discord-ceph"
            #   match_re:
            #     ceph: ceph
            #   continue: true
            # - match:             #budimandojo
            #     severity: critical
            #   receiver: discord
        inhibit_rules:
          - source_matchers:
              - severity = "critical"
            target_matchers:
              - severity = "warning"
            equal: [alertname, namespace]
      ingress:
        enabled: true
        pathType: Prefix
        ingressClassName: nginx
        annotations:
          nginx.ingress.kubernetes.io/whitelist-source-range: |
            10.0.0.0/8,172.16.0.0/12,192.168.0.0/16
          hajimari.io/appName: Alert Manager
          hajimari.io/icon: mdi:alert-decagram-outline
        hosts:
          - &host alert-manager.${SECRET_PUBLIC_DOMAIN}
        tls:
          - hosts:
              - *host
      alertmanagerSpec:
        resources:
          requests:
            cpu: 10m
            memory: 53M
          limits:
            cpu: 178m
            memory: 385M
        replicas: 3
        storage:
          volumeClaimTemplate:
            spec:
              storageClassName: local-path
              resources:
                requests:
                  storage: 1Gi
    grafana:
      enabled: false
      forceDeployDashboards: true
      sidecar:
        dashboards:
          multicluster:
            etcd:
              enabled: true

    kube-state-metrics:
      metricLabelsAllowlist: ['persistentvolumeclaims=[*]']
      prometheus:
        monitor:
          enabled: true
          relabelings:
            - action: replace
              regex: (.*)
              replacement: $1
              sourceLabels: [__meta_kubernetes_pod_node_name]
              targetLabel: kubernetes_node
    kubelet:
      enabled: true
      serviceMonitor:
        metricRelabelings:
        # Remove duplicate metrics
          - sourceLabels: [__name__]
            regex: (apiserver_audit|apiserver_client|apiserver_delegated|apiserver_envelope|apiserver_storage|apiserver_webhooks|authentication_token|cadvisor_version|container_blkio|container_cpu|container_fs|container_last|container_memory|container_network|container_oom|container_processes|container|csi_operations|disabled_metric|get_token|go|hidden_metric|kubelet_certificate|kubelet_cgroup|kubelet_container|kubelet_containers|kubelet_cpu|kubelet_device|kubelet_graceful|kubelet_http|kubelet_lifecycle|kubelet_managed|kubelet_node|kubelet_pleg|kubelet_pod|kubelet_run|kubelet_running|kubelet_runtime|kubelet_server|kubelet_started|kubelet_volume|kubernetes_build|kubernetes_feature|machine_cpu|machine_memory|machine_nvm|machine_scrape|node_namespace|plugin_manager|prober_probe|process_cpu|process_max|process_open|process_resident|process_start|process_virtual|registered_metric|rest_client|scrape_duration|scrape_samples|scrape_series|storage_operation|volume_manager|volume_operation|workqueue)_(.+)
            action: keep
          - sourceLabels: [node]
            targetLabel: instance
            action: replace
    kubeApiServer:
      enabled: true
      serviceMonitor:
        metricRelabelings:
        # Remove duplicate metrics
          - sourceLabels: [__name__]
            regex: (aggregator_openapi|aggregator_unavailable|apiextensions_openapi|apiserver_admission|apiserver_audit|apiserver_cache|apiserver_cel|apiserver_client|apiserver_crd|apiserver_current|apiserver_envelope|apiserver_flowcontrol|apiserver_init|apiserver_kube|apiserver_longrunning|apiserver_request|apiserver_requested|apiserver_response|apiserver_selfrequest|apiserver_storage|apiserver_terminated|apiserver_tls|apiserver_watch|apiserver_webhooks|authenticated_user|authentication|disabled_metric|etcd_bookmark|etcd_lease|etcd_request|field_validation|get_token|go|grpc_client|hidden_metric|kube_apiserver|kubernetes_build|kubernetes_feature|node_authorizer|pod_security|process_cpu|process_max|process_open|process_resident|process_start|process_virtual|registered_metric|rest_client|scrape_duration|scrape_samples|scrape_series|serviceaccount_legacy|serviceaccount_stale|serviceaccount_valid|watch_cache|workqueue)_(.+)
            action: keep
        # Remove high cardinality metrics
          - sourceLabels: [__name__]
            regex: (apiserver|etcd|rest_client)_request(|_sli|_slo)_duration_seconds_bucket
            action: drop
          - sourceLabels: [__name__]
            regex: (apiserver_response_sizes_bucket|apiserver_watch_events_sizes_bucket)
            action: drop
    kubeControllerManager:
      enabled: true
      endpoints: &cp
        - 192.168.42.111
        - 192.168.42.112
        - 192.168.42.113
      serviceMonitor:
        metricRelabelings:
        # Remove duplicate metrics
          - sourceLabels: [__name__]
            regex: (apiserver_audit|apiserver_client|apiserver_delegated|apiserver_envelope|apiserver_storage|apiserver_webhooks|attachdetach_controller|authenticated_user|authentication|cronjob_controller|disabled_metric|endpoint_slice|ephemeral_volume|garbagecollector_controller|get_token|go|hidden_metric|job_controller|kubernetes_build|kubernetes_feature|leader_election|node_collector|node_ipam|process_cpu|process_max|process_open|process_resident|process_start|process_virtual|pv_collector|registered_metric|replicaset_controller|rest_client|retroactive_storageclass|root_ca|running_managed|scrape_duration|scrape_samples|scrape_series|service_controller|storage_count|storage_operation|ttl_after|volume_operation|workqueue)_(.+)
            action: keep
    kubeEtcd:
      enabled: true
      endpoints: [192.168.42.111, 192.168.42.112, 192.168.42.113]
    kubeProxy:
      enabled: false # Disabled because eBPF
      endpoints: [192.168.42.111, 192.168.42.112, 192.168.42.113]
    kubeScheduler:
      enabled: true
      endpoints: *cp
      serviceMonitor:
        metricRelabelings:
        # Remove duplicate metrics
          - sourceLabels: [__name__]
            regex: (apiserver_audit|apiserver_client|apiserver_delegated|apiserver_envelope|apiserver_storage|apiserver_webhooks|authenticated_user|authentication|disabled_metric|go|hidden_metric|kubernetes_build|kubernetes_feature|leader_election|process_cpu|process_max|process_open|process_resident|process_start|process_virtual|registered_metric|rest_client|scheduler|scrape_duration|scrape_samples|scrape_series|workqueue)_(.+)
            action: keep


          ##truxnell
    kubeStateMetrics:
      enabled: true
    prometheusOperator:
      resources:
        requests:
          cpu: 35m
          memory: 273M
        limits:
          memory: 326M
      serviceMonitor:
        sampleLimit: 0
      prometheusConfigReloader:
        resources:
          requests:
            cpu: 100m
            memory: 50Mi
          limits:
            cpu: 300m
            memory: 100Mi

    nodeExporter:
      enabled: true
      serviceMonitor:
        relabelings:
          - action: replace
            regex: (.*)
            replacement: $1
            sourceLabels:
              - __meta_kubernetes_pod_node_name
            targetLabel: kubernetes_node

    prometheus-node-exporter:
      fullnameOverride: node-exporter
      extraArgs:
        - --collector.filesystem.ignored-mount-points=^/(dev|proc|sys|var)($|/)
        - --collector.filesystem.ignored-fs-types=^(autofs|binfmt_misc|bpf|cgroup2?|configfs|debugfs|devpts|devtmpfs|fusectl|hugetlbfs|iso9660|mqueue|nsfs|overlay|proc|procfs|pstore|rpc_pipefs|securityfs|selinuxfs|squashfs|sysfs|tracefs|tmpfs)$
      prometheus:
        monitor:
          enabled: true
          relabelings:
            - action: replace
              regex: (.*)
              replacement: $1
              sourceLabels:
                - __meta_kubernetes_pod_node_name
              targetLabel: kubernetes_node

      resources:
        requests:
          cpu: 23m
          memory: 64M
        limits:
          cpu: 400m
          memory: 279M
      tolerations:
        - effect: NoExecute
          operator: Exists
        - effect: NoSchedule
          operator: Exists
        ##########3

    prometheus:
      ingress:
        enabled: true
        ingressClassName: nginx
        annotations:
          nginx.ingress.kubernetes.io/whitelist-source-range: |
            10.0.0.0/8,172.16.0.0/12,192.168.0.0/16
          hajimari.io/appName: Prometheus
          hajimari.io/icon: simple-icons:prometheus
        pathType: Prefix
        hosts:
          - &host prometheus.${SECRET_PUBLIC_DOMAIN}
        tls:
          - hosts:
              - *host
      thanosService:
        enabled: true
      thanosServiceMonitor:
        enabled: true
      prometheusSpec:
        replicas: 3
        replicaExternalLabelName: __replica__
        scrapeInterval: 1m
        ruleSelectorNilUsesHelmValues: false
        serviceMonitorSelectorNilUsesHelmValues: false
        podMonitorSelectorNilUsesHelmValues: false
        probeSelectorNilUsesHelmValues: false
        enableAdminAPI: true
        walCompression: true
        resources:
          requests:
            cpu: 350m
            memory: 1500M
          limits:
            memory: 4500M
        # Remote write with Thanos Receiver
        # remoteWrite:
        #   - url: http://thanos-receive-router.monitoring.svc.cluster.local:19291/api/v1/receive
        # remoteWriteDashboards: true
        thanos:
          image: quay.io/thanos/thanos:v0.31.0
          objectStorageConfig:
            name: thanos-objstore-secret
            key: objstore.yml
        retention: 2d
        retentionSize: 15GB
        storageSpec:
          volumeClaimTemplate:
            spec:
              storageClassName: local-path #others have "ceph-block"
              resources:
                requests:
                  storage: 15Gi
        additionalScrapeConfigs:
          - job_name: openwrt-node-exporter # previous had a coredns exporter on port 9153
            static_configs:
              - targets: [192.168.1.1:9100] # router openwrt endpoint
        # - job_name: frr-exporter #r metrics from the FRR Unix sockets , BGP metrics not yet online
        #   static_configs:
        #   - targets: ["vyos.turbo.ac:9342"]
          - job_name: gatus #health dashboard
            static_configs:
              - targets: ['gatus.pub.${SECRET_DOMAIN}'] # gatus endpoint
          - job_name: k8s-lb
            static_configs:
              - targets: [192.168.1.1:8080] # router  the k3s registration address , the haproxy lb
          - job_name: kopia #backup restore tol
            static_configs:
              - targets: ['expanse.${SECRET_DOMAIN}:51516'] # the nfs server for him
          - job_name: minio #object storage
            metrics_path: /minio/v2/metrics/cluster
            static_configs:
              - targets: ['expanse.${SECRET_DOMAIN}:9000']
        # - job_name: node-exporter
        #   static_configs:
        #   - targets: ["expanse.turbo.ac:9100", "pikvm.turbo.ac:9100", "vyos.turbo.ac:9100"]
          - job_name: node-exporter
            static_configs:
              - targets: ['expanse.${SECRET_DOMAIN}:9100', 'pikvm.${SECRET_DOMAIN}:9100'] #pikvm to be created
            # - targets: ["expanse.${SECRET_DOMAIN}:9100"]
          - job_name: pikvm # not yet online
            metrics_path: /api/export/prometheus/metrics
            basic_auth:
              username: admin
              password: 1nternalUseOnly
            static_configs:
              - targets: ['pikvm.${SECRET_DOMAIN}']
          - job_name: podman-exporter #exposes entire taxonomy of k8s components to metrics
            static_configs:
              - targets: ['L2-1-ansible-debops.${SECRET_DOMAIN}:9882'] # previous coleague had vyos as target because of the haproxy and coredns containers installed on it .we will use debops bastion server that is not in the cluster
          - job_name: smartctl-exporter #hdd/sdd smart devices
            static_configs:
              - targets: ['expanse.${SECRET_DOMAIN}:9633']
        # - job_name: smtp-relay
        #   static_configs:
        #   - targets: ["192.168.254.4:8080"] # router
          - job_name: vnstat #traffic monitor ,  assumed this target has a vnstat-metrics.cgi . for openwrt perl module missing on this script
            static_configs:
              - targets: [192.168.1.1:442/cgi-bin/vnstat-metrics.cgi] #8685
          - job_name: zrepl #zfs replication ( push replication)
            static_configs:
              - targets: ['expanse.${SECRET_DOMAIN}:9811']
        #dragosh
          - job_name: pve-node-exporter #proxmox
            scrape_interval: 1m
            scrape_timeout: 10s
            honor_timestamps: true
            static_configs:
              - targets:
                  - osiris:${SECRET_DOMAIN}9100
                  - pve1.${SECRET_DOMAIN}:9100
                  - pve2.${SECRET_DOMAIN}:9100
        #timothy
        # - job_name: pikvm
        #   scrape_interval: 1m
        #   scrape_timeout: 10s
        #   metrics_path: /api/export/prometheus/metrics
        #   basic_auth:
        #     username: "${SECRET_PIKVM_USERNAME}"
        #     password: "${SECRET_PIKVM_PASSWORD}"
        #   static_configs:
        #   - targets:
        #     - "pikvm.${SECRET_PRIVATE_DOMAIN}"
        # - job_name: node-exporter
        #   scrape_interval: 1m
        #   scrape_timeout: 10s
        #   honor_timestamps: true
        #   static_configs:
        #   - targets:
        #     - "opnsense.${SECRET_PRIVATE_DOMAIN}:9100"
        #     - "expanse.${SECRET_PRIVATE_DOMAIN}:9100"
        #     - "valetudo.${SECRET_PRIVATE_DOMAIN}:9100"
        #     - "pikvm.${SECRET_PRIVATE_DOMAIN}:9100"
        #rust84
          - job_name: home-assistant
            scrape_interval: 1m
            scrape_timeout: 10s
            metrics_path: /api/prometheus
            bearer_token: ${SECRET_HASS_PROMETHEUS_TOKEN}
            scheme: http
            honor_timestamps: true
            static_configs:
              - targets:
                  - home-assistant.${SECRET_DOMAIN}:8123

          #bilimek
          # - job_name: 'home-assistant'
          #   scrape_interval: 60s
          #   metrics_path: '/api/prometheus'
          #   authorization:
          #     credentials: "{{ .PROM_HASS_TOKEN }}"
          #   scheme: http
          #   static_configs:
          #   - targets:
          #     - home-assistant.default.svc:8123


          #####################
          #truxnell


          - job_name: zfs-exporter
            scrape_interval: 1m
            scrape_timeout: 10s
            honor_timestamps: true
            static_configs:
              - targets:
                  - helios.${SECRET_DOMAIN}:9134

        # - job_name: vnstat
        #   scrape_interval: 1m
        #   scrape_timeout: 10s
        #   honor_timestamps: true
        #   static_configs:
        #   - targets:
        #     - 'gateway.${INTERNAL_DOMAIN}:8685'

        # - job_name: minio
        #   scrape_interval: 1m
        #   scrape_timeout: 10s
        #   honor_timestamps: true
        #   metrics_path: /minio/v2/metrics/cluster
        #   scheme: https
        #   static_configs:
        #   - targets:
        #     - 's3.${EXTERNAL_DOMAIN}'

        # - job_name: smartctl-exporter
        #   scrape_interval: 10m
        #   scrape_timeout: 10s
        #   honor_timestamps: true
        #   static_configs:
        #   - targets:
        #     - 'helios.${INTERNAL_DOMAIN}:9633'


        # - job_name: 'octoprint'
        #   scrape_interval: 1m
        #   scrape_timeout: 10s
        #   metrics_path: '/plugin/prometheus_exporter/metrics'
        #   params:
        #     apikey: ['${SECRET_OCTOPRINT_APIKEY}']
        #   tls_config:
        #     insecure_skip_verify: true
        #   static_configs:
        #   - targets:
        #     - 'prusa.${INTERNAL_DOMAIN}:5000'


          - job_name: kubernetes-ingresses-http-2xx
            metrics_path: /probe
            scrape_interval: 2m
            params:
              module: [http_2xx]
            kubernetes_sd_configs:
              - role: ingress
            relabel_configs:
              - source_labels: [__meta_kubernetes_ingress_annotation_prometheus_io_probe]
                action: keep
                regex: true
              - source_labels: [__meta_kubernetes_ingress_annotation_prometheus_io_module]
                action: keep
                regex: http_2xx
              - source_labels: [__meta_kubernetes_ingress_scheme, __address__, __meta_kubernetes_ingress_path]
                regex: (.+);(.+);(.+)
                replacement: $${1}://$${2}$${3}
                target_label: __param_target
              - target_label: __address__
                replacement: blackbox-exporter:9115
              - source_labels: [__param_target]
                target_label: instance
              - action: labelmap
                regex: __meta_kubernetes_ingress_label_(.+)
              - source_labels: [__meta_kubernetes_namespace]
                target_label: kubernetes_namespace
              - source_labels: [__meta_kubernetes_ingress_name]
                target_label: kubernetes_name

          - job_name: kubernetes-ingresses-http403
            metrics_path: /probe
            scrape_interval: 2m
            params:
              module: [http_403]
            kubernetes_sd_configs:
              - role: ingress
            relabel_configs:
              - source_labels: [__meta_kubernetes_ingress_annotation_prometheus_io_probe]
                action: keep
                regex: true
              - source_labels: [__meta_kubernetes_ingress_annotation_prometheus_io_module]
                action: keep
                regex: http_403
              - source_labels: [__meta_kubernetes_ingress_scheme, __address__, __meta_kubernetes_ingress_path]
                regex: (.+);(.+);(.+)
                replacement: $${1}://$${2}$${3}
                target_label: __param_target
              - target_label: __address__
                replacement: blackbox-exporter:9115
              - source_labels: [__param_target]
                target_label: instance
              - action: labelmap
                regex: __meta_kubernetes_ingress_label_(.+)
              - source_labels: [__meta_kubernetes_namespace]
                target_label: kubernetes_namespace
              - source_labels: [__meta_kubernetes_ingress_name]
                target_label: kubernetes_name

          - job_name: kubernetes-services-http
            metrics_path: /probe
            scrape_interval: 2m
            params:
              module: [http_2xx]
            kubernetes_sd_configs:
              - role: service
            relabel_configs:
              - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_probe]
                action: keep
                regex: true
              - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_protocol]
                action: keep
                regex: http
              - source_labels: [__address__]
                target_label: __param_target
              - target_label: __address__
                replacement: blackbox-exporter:9115
              - source_labels: [__param_target]
                target_label: instance
              - action: labelmap
                regex: __meta_kubernetes_service_label_(.+)
              - source_labels: [__meta_kubernetes_namespace]
                target_label: kubernetes_namespace
              - source_labels: [__meta_kubernetes_service_name]
                target_label: kubernetes_name


          - job_name: kubernetes-services-tcp
            metrics_path: /probe
            scrape_interval: 2m
            params:
              module: [tcp_connect]
            kubernetes_sd_configs:
              - role: service
            relabel_configs:
              - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_probe]
                action: keep
                regex: true
              - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_protocol]
                action: keep
                regex: tcp
              - source_labels: [__address__]
                target_label: __param_target
              - target_label: __address__
                replacement: blackbox-exporter:9115
              - source_labels: [__param_target]
                target_label: instance
              - action: labelmap
                regex: __meta_kubernetes_service_label_(.+)
              - source_labels: [__meta_kubernetes_namespace]
                target_label: kubernetes_namespace
              - source_labels: [__meta_kubernetes_service_name]
                target_label: kubernetes_name

            ############
