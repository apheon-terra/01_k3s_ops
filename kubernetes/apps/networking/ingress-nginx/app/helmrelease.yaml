---
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: ingress-nginx
  namespace: networking
spec:
  interval: 30m
  timeout: 15m
  chart:
    spec:
      chart: ingress-nginx
      version: 4.7.1
      sourceRef:
        kind: HelmRepository
        name: ingress-nginx
        namespace: flux-system
  maxHistory: 3
  install:
    createNamespace: true
    remediation:
      retries: 3
  upgrade:
    cleanupOnFail: true
    remediation:
      retries: 3
  uninstall:
    keepHistory: false
  values:
    controller:
      replicaCount: 2
      extraEnvs:
        - name: TZ
          value: ${TIMEZONE}
      service:
        annotations:
          external-dns.alpha.kubernetes.io/hostname: ingress.${SECRET_PUBLIC_DOMAIN}
        externalIPs: ["192.168.69.101"] #${SECRET_INGRESS_NGINX}
        externalTrafficPolicy: Local
      # publishService:
      #   enabled: true
      ingressClassResource:
        default: true
      config:
        client-header-timeout: 120
        client-body-buffer-size: 100M
        client-body-timeout: 120
        custom-http-errors: 400,401,403,404,500,502,503,504
        enable-brotli: 'true'
        enable-real-ip: 'true'
        hsts-max-age: 31449600
        forwarded-for-header: CF-Connecting-IP
        keep-alive: 120
        keep-alive-requests: 10000
        proxy-body-size: 0
        ssl-protocols: TLSv1.3 TLSv1.2
        use-forwarded-headers: 'true'
        log-format-escape-json: 'true'
        log-format-upstream: >-
          {"time": "$time_iso8601", "remote_addr": "$proxy_protocol_addr", "x_forwarded_for": "$proxy_add_x_forwarded_for", "request_id": "$req_id", "remote_user":
          "$remote_user", "bytes_sent": $bytes_sent, "request_time": $request_time, "status": $status, "vhost": "$host", "request_proto": "$server_protocol",
          "path": "$uri", "request_query": "$args", "request_length": $request_length, "duration": $request_time,"method": "$request_method", "http_referrer":
          "$http_referer", "http_user_agent": "$http_user_agent"}
        proxy-buffer-size: 16k
      metrics:
        enabled: true
        serviceMonitor:
          enabled: true
          namespace: networking
          namespaceSelector:
            any: true
      extraArgs:
        default-ssl-certificate: networking/${SECRET_PUBLIC_DOMAIN/./-}-tls
      topologySpreadConstraints:
        - maxSkew: 1
          topologyKey: kubernetes.io/hostname
          whenUnsatisfiable: DoNotSchedule
          labelSelector:
            matchLabels:
              app.kubernetes.io/name: ingress-nginx
              app.kubernetes.io/component: controller

      # podAnnotations:
      #   configmap.reloader.stakater.com/reload: "cloudflare-networks"
      resources:
        requests:
          cpu: 10m
          memory: 250Mi
        limits:
          memory: 500Mi
    defaultBackend:
      enabled: true
      image:
        repository: ghcr.io/tarampampam/error-pages
        tag: 2.24.0
      extraEnvs:
        - {name: TEMPLATE_NAME, value: lost-in-space}
        - name: SHOW_DETAILS
          value: 'false'
        # valuesFrom:
        # # Cloudflare Networks
        # # https://www.cloudflare.com/ips/
        # - targetPath: controller.config.proxy-real-ip-cidr
        #   kind: ConfigMap
        #   name: cloudflare-networks
        #   valuesKey: cloudflare-networks.txt


# ServiceMonitor allows Prometheus to discover targets that expose metrics in a Kubernetes cluster, and the metrics can be scraped and used for monitoring and alerting.

# publishService is an option in Metallb that determines whether or not the service should be published to the local network by announcing it using BGP (Border Gateway Protocol). When publishService is set to true, Metallb will announce the IP addresses assigned to the load balancer using BGP, allowing traffic from outside the cluster to reach the service.

# ingressClassResource is an option in Kubernetes that allows you to specify the default ingress class to use for the service. An ingress class is a way to distinguish between different types of ingress controllers that may be used in a cluster. When ingressClassResource is set to true, the service will use the default ingress class for the cluster, which can be defined using an IngressClass resource in Kubernetes.

#     externalIPs: This field allows you to specify the IP addresses of the nodes in the cluster that you want to use for external access to the Service. In this example, the externalIP is set to 192.168.69.101.

#     externalTrafficPolicy: This field specifies how the Service should distribute the incoming traffic among the Pods. Setting it to Local ensures that the traffic is only routed to the Pods that are running on the same node as the client. This can help improve network performance by reducing the amount of traffic that needs to be routed across the network.

# By configuring the service section, you can control how traffic is routed to the Pods in the Service, making it easier to manage communication between different parts of your application.
